#apd core stuff
=begin

WICHTIG

RPG classen brauchen einen instance array, wegen dem dumping

=end
#add Comparable

module RPG
	class Element
		attr_accessor :id,:state,:visible
		def initialize(id=nil,state=0,visible=true)
			@id = nil
			@state = state
			@visible = visible
		end
		def name
			#multi lang
		end
		def icon
		end
		def physical?
			return [1,3].include?(@state)
		end
		def magical?
			return [2,3].include?(@state)	
		end
	end
	class Resistance
		attr_accessor :id,:name,:value
		def initialize(name,value)
			@name = name
			@value = value
		end
	end
	class State
		attr_accessor :id,:elements,:resistances,:add_elements,:del_elements,:noexp,:noevade
		attr_accessor :atk_rate,:def_rate,:spi_rate,:agi_rate
		def name
			#multi lang
		end		
		def initialize(id)
			@id=id
			@elements={} #element => resistances -> for attack
			@resistances={} #element => resistances -> for defense
			@add_elements =[]
			@del_elements =[]
			@noexp=false
			@noevade = false
			@atk_rate=1
			@def_rate=1
			@spi_rate=1
			@agi_rate=1
		end	
		def icon
		end
	end
	
	class Damage
		attr_accessor :elements,:value,:proc
		def initialize(elements=[],value=1.0)
			@elements = elements
			@value = value
		end
	end

	class Atribute
		attr_accessor :id,:damage_elements,:defense_elements
		def initialize(id)
			@id=id
			
			#element => { level => boost}
			@damage_elements={}
			@defense_elements={}
		end
		def name
			#multi lang
		end
		def description
			#multi lang
		end
		def icon
		end
		
		def atk_boost(level)
			case @atk_boost
			when Proc
				return @atk_boost.call(level)
			when Numeric
				return @atk_boost * level
			else
				return @atk_boost
			end
		end
		
		def atk_boost=(value)
			case value
			when String
				@atk_boost = evals('lambda { |i| #{value}}')
			else
				@atk_boost = value
			end
		end
		
	end	
	class Actor
		attr_accessor :id,:actorclass
		def initialize(id)
			@id=id
		end
	end
	class ActorClass
		attr_accessor :id,:elements,:equipment,:learning
		def name
			#multi lang
		end		
		def initialize(id)
			@id=id
			@elements={} #element => resistances
			@equipment={} #symbol => array of items
			@learning = []#array of RPG::ActorClass::Learning
		end
		def icon
		end
		
		class Learning
			attr_accessor :item,:level,:start_level,:max_level
			#start_level for Atributes
			def initialize(item)
				@item=item
				@level=1
				@start_level=nil
				@max_level=nil
			end
		end
	end
	class Enemy
		attr_accessor :id,:elements
		attr_accessor :baseAtk,:baseSpi
		def name
			#multi lang
		end
		def initialize(id)
			@id=id
			@elements={} #element => resistances
			@baseAtk=0
			@baseSpi=0
		end	
	end
	class Troop
		attr_accessor :id,:name,:enemies
		
	end
	class Group
		@@groups = []
	#for groupping items,enemies others
		def name
			#multi lang
		end
		def initialize
			@members = []
			@@groups << self
		end
		def icon
		end
		
		def ===(item)
			@members.include?(item)
		end
		def << (item)
			@members << item
			return self
		end
		def each
			if block_given?
				@members.each {|s| yield s}
				return self
			else
				return Enumerator.new(self)
			end
		end
		def self.groups
			return @@groups
		end
		include Enumerable
	end
	class BaseItem
		
		attr_accessor :id,:price,:dropable

		def name
			#multi lang
		end
		def description
			#multi lang
		end
		def icon
		end

		def ===(item)#game::item
			return self == item.send(:instance_variable_get,:data)
		end
		#def groups
		#	Groups.groups.find_all {|g| g.include?(self)}
		#end
	end
	module InventarableItem
		attr_accessor :dropable
		attr_writer :weight	
		def weight
			return @weight.nil? ? 0 : @weight
		end
	end
	module EquipableItem
		attr_accessor :cursed,:max_durability,:remove_if_destroyed,:destroyed_item
		attr_accessor :atk,:spi
	end
	module UsableItem
		attr_accessor :max_uses,:remove_if_empty,:empty_item,:empty_price
		attr_writer :consumable,:occasion
		def consumable
			return @consumable.nil? ? true : @consumable
		end
		def occasion
			return @occasion.nil? ? 0 : @occasion
		end

		def battle_ok?
			return [0, 1].include?(@occasion)
		end
		def menu_ok?
			return [0, 2].include?(@occasion)
		end
	end
	
	module SockItem
		attr_writer :sock_atk,:sock_spi
		def sock_atk
			return @sock_atk.nil? ? 0 : @sock_atk
		end
		def sock_spi
			return @sock_spi.nil? ? 0 : @sock_spi
		end
	end
	class Socket
		attr_accessor :inc,:exc
		attr_writer :name
		def initialize(items=[],exc=[])
			@inc=inc# a itemgroup or a array of items
			@exc=exc# a itemgroup or a array of items
		end
		def name
		end
		def === (item)
			temp = true
			temp = @inc.include?(item) if @inc != []
			if @exc.include?(item)
				temp = false
			end
			return temp
		end
	end
	
	module SockableItem
		attr_writer :sockets
		def sockets
			@sockets ||= []
			return @sockets
		end
	end
	
	class Item < BaseItem
		include UsableItem
	end
	class Skill < BaseItem
		include UsableItem
	end
	class Weapon < BaseItem
		include EquipableItem
		#include SockableItem
		attr_accessor :hands
	end
	class Armor < BaseItem
		include EquipableItem
		#include SockableItem
	end
end

module Game

	def self.make(obj)
		return const_get(obj.class.name.split("::").last).new(obj)
	end


 	class Battler
 		attr_accessor :states, :atributes
		def initialize(battler)
			@data = battler
			@states = []
			@atributes = {}
		end
	 	def name
			@data.name
		end
		
		def atk
			temp = baseAtk
			cs_stat_multi(:atk) {|i| temp *= i}
			cs_stat_add(:atk) {|i| temp += i}
			return temp
		end

		def spi
			temp = baseSpi
			cs_stat_multi(:spi) {|i| temp *= i}
			cs_stat_add(:spi) {|i| temp += i}
			return temp
		end
		def add_atribute(atribute,level=0,max_level=10)
			return if @atributes.include?(atribute)
			@atributes[atribute]= Atribute.new(atribute,level,max_level)
			return self
		end
 	end
 	class Battler
 		def stats_cs_stat_multi(stat)
 			return states.map {|s| s.send("#{stat}_rate")}
 		end
 		def atributes_cs_stat_add(stat)
 			return atributes.vaules.map {|atri| atri.send("#{stat}_boost")}
 		end
 	end
 	
	class Enemy < Battler
		
		def elements
			return @data.elements
		end
		def baseAtk
			return @data.baseAtk
		end
		def baseSpi
			return @data.baseSpi
		end
	end
	class Actor < Battler
		attr_accessor :actorclass
		def initialize(battler)
			super
			@actorclass = @data.actorclass
		end
				
		def elements
			return actorclass.elements
		end
	end
	class Atribute
		attr_accessor :level,:max_level
		def initialize(data,level=0,max_level=10)
			@data=data
			@level=level
			@max_level=max_level
		end
		def name
			return @data.name
		end
		def description
			return @data.description
		end
		def upgrade
		  @level = [@level+1, @max_level].min
		end
		
		def downgrade
		  @level = [@level-1, 0].max
		end
		def icon
			return @data.icon
		end
		
		def damage_elements
			result = {}
			@data.damage_elements.each {|el,temp| temp.each{|l,v| result[el]=v if l==@level}}
			return result
		end
		
		def defense_elements
			result = {}
			@data.defense_elements.each {|el,temp| temp.each{|l,v| result[el]=v if l==@level}}
			return result
		end
		
		def atk_boost
			return @data.atk_boost(@level)
		end
		
	end
	class Unit
		attr_accessor :members
		def initialize
			members=[]
		end
	end

	class Troop < Unit
		def initialize(troop)
			super
			troop.enemies.each {|e| @members << Enemy.new(e)}
		end
	end	
	class BaseItem
		attr_reader :data
		ITEMMODULES = [:EquipableItem,:UsableItem,:SockItem,:SockableItem,:InventarableItem]
		def initialize(item)
			@data = item
			#cs for the modules
			ITEMMODULES.each {|s| self.extend(Game.const_get(s)) if @data.is_a?(RPG.const_get(s))}
		end
		def name
			return @data.name
		end
		def description
			return @data.description
		end
		def price
			return @data.price
		end
		
		def icon
			return @data.icon
		end
	end

	module InventarableItem
		def weight
			return @data.weight
		end
		def dropable
			return @data.dropable
		end
		class << self
			def extend_object(obj)
				super
				obj.extend(SockableInventarableItem) if obj.is_a?(SockableItem)
			end
		end	
	end
	module EquipableItem
		attr_writer :durability
		def max_durability
			@data.max_durability
		end
		def durability
			return @durability.nil? ? max_durability.nil? ? nil : max_durability : [0,@durability].max
		end
		def cursed
			return @data.cursed
		end
		
		def remove_if_destroyed
			return @data.remove_if_destroyed
		end
		def destroyed_item
			return nil if @data.destroyed_item.nil?
			return Game.make(@data.destroyed_item)
		end
		def atk
			return @data.atk * @durability.nil? ? 1 : (1 - @data.durability_atk * durability / max_durability)
		end
		def spi
			return @data.spi * @durability.nil? ? 1 : (1 - @data.durability_spi * durability / max_durability)
		end
		
		class << self
			def extend_object(obj)
				super
				obj.extend(SockableEquipableItem) if obj.is_a?(SockableItem)
			end
		end
	end
	module UsableItem
		attr_accessor :uses
		def consumable
			return @data.consumable
		end
		def max_uses
			return @data.max_uses
		end
		def occasion
			return @data.occasion
		end
		def usable?
			return false if uses == 0
			return true
		end
		def fill_uses
			@uses=max_uses
			return nil
		end
		
		def price
			return @uses.nil? ? super : (@uses == 0 and !@data.empty_price.nil?) ? @data.empty_price : super * @uses
		end
		
		def remove_if_empty
			return @data.remove_if_empty
		end
		
		def empty_item
			return nil if @data.empty_item.nil?
			return Game.make(@data.empty_item)
		end
	end

	class Socket
		attr_reader :item
		def initialize(sock)
			@data = sock
		end
		def item=(item)
			temp=@item
			@item=item if self === item
			return temp
		end
		def ===(item)
			return @data === iten
		end
	end
	module SockItem
		def sock_atk
			return @data.sock_atk
		end
		def sock_spi
			return @data.sock_spi
		end
	end
	
	module SockableItem
		attr_reader :sockets
		def initialize(item)
			super
			@sockets =[]
			item.sockets.each {|s| @sockets << Socket.new(s)}
		end
		def price
			temp = super
			@sockets.each {|i| temp += i.item.price}
			return temp
		end
		def sock_item(i,item)
			return if @sockets[i].nil?
			return @sockets[i].item=item
		end
		class << self
			def extend_object(obj)
				super
				#obj.extend(SockableUsableItem) if obj.is_a?(UsableItem)
				obj.extend(SockableInventarableItem) if obj.is_a?(InventarableItem)
				obj.extend(SockableEquipableItem) if obj.is_a?(EquipableItem)
			end
		end
	end

	#module SockableUsableItem
	
	#end
	module SockableInventarableItem
		def weight
			temp=super
			@sockets.each {|i| temp += i.item.weight if i.item.respond_to?(:weight) }
			return temp
		end	
	end

	module SockableEquipableItem
		def atk
			temp=super
			@sockets.each {|i| temp += i.item.sock_atk }
			return temp
		end	
			
		def spi
			temp=super
			@sockets.each {|i| temp += i.item.sock_spi }
			return temp
		end	
	end
	
	class Item < BaseItem
		
	end
	class Weapon < BaseItem
		
		attr_accessor :damages
		def initialize(item)
			super
			@damages = []
		end
		def hands
			return @data.hands
		end
	end
	class Armor < BaseItem
		
	end
end



#methods

def calc_damage(actor,enemy,item)
	sum = 0
	item.damages.each {|d|
		temp = d.value
		#damage
		elements = d.elements
		elements |= actor.states.map {|s| s.add_elements}.flatten
		elements -= actor.states.map {|s| s.del_elements}.flatten
		elements.uniq.each{|e|
			actor.stages.each {|s| temp *= s.elements[e].value}
			actor.atributes.each_values {|atri| temp *= atri.damage_elements[e] || 1}
			temp *= enemy.elements[e].value
			enemy.states.each {|s| temp *= s.resistances[e].value}
			enemy.atributes.each_values {|atri| temp *= atri.defense_elements[e] || 1}
		}
		sum += temp
	}
	return sum
end

def calc_durability(actor,enemy,item)
	return unless item.is_a?(Game::EquipableItem) &&  !item.durability.nil?
	#all items or only the not ranged?
	damage = 0 #calc TODO
	item.durability -= damage
	if item.durability == 0
		actor.unequip(item)
		actor.remove_item(item)
	end
	return
end


def use_item(item)
	return if item.is_a?(Game::UableItem)
	return unless item.usable?
	#effect
	return unless item.consumable
	remove_item(item) if item.max_uses.nil?
	item.uses-=1
	if item.uses == 0
		remove_item(item) if item.remove_if_empty
		unless (ei = item.empty_item).nil?
			remove_item(item)
			gain_item(ei)
		end
	end
end

